nodejs 简介

1. 事件驱动编程
    程序的执行流程取决于事件的编程风格；

    与事件循环相伴而生：
        两个作用：
            事件检测
            事件触发处理

    事件由事件处理程序或者事件回调函数进行处理：
        当某个事件发生了，就会调用事件回调函数
    例子：
        典型的阻塞式：
            result = query('SELECT * FROM USER WHERE ID = 1');
            do_something(result);
            直到数据库查询完成了，才执行下面代码

        事件驱动（异步操作）：
            query_finish = function(result){
                do_something(result);
            };
            query('SELECT * FROM USER WHERE ID = 1',query_finish);
            这样的风格：
                当多个IO操作并行时，不会发生阻塞，每一个数据库查询动作结束后，自动调用回调方法

2. 优点
    并发

3. nodejs和js简化事件驱动编程

    利用js的闭包

    js闭包：
        定义：闭包就是js函数，只不过这个函数可以访问它自身被声明的那个作用域里的变量（会记住被声明的上下文）
        (function(){
            var num = 0;
            $('#mbt').click(function(){
                num++;
            });
        }());

        click中的闭包，可以访问外面的num变量


